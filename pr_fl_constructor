import json,os
class constructor:
    #на вход поступает закодироанное имя пропанта
    def prop_section(self,sch_frame):
        with open("prop_DB",'r',encoding='utf-8') as json_file:
            prop_DB=json.load(json_file)
        #мы по имени в PropantModel ищем нужный нам PropantBase
        ProppantModel=prop_DB['ProppantModel']
        proppant_types=[]
        for key in sch_frame:
            proppant_types.append(sch_frame[key][6])
        proppant_types=list(set(proppant_types))
        needed_data=[]
        for el in ProppantModel['data']:
            if el[0] in proppant_types:
                needed_data.append(el)
        #поехали конструировать секцию
        prop_section={
            "UOM":ProppantModel['UOM'],
            "columnCount":13,
            "columnKeys":ProppantModel['columnKeys'],
            "data":needed_data,
            "rowCount":len(needed_data),
            "value":""}
        return prop_section
    
    #на вход расписание закачки с таблицы
    def fluid_section(self,sch_frame,fluid_in_well):
        liquids_types=[]
        for key in sch_frame:
            liquids_types.append(sch_frame[key][5])
        liquids_types.append(fluid_in_well)
        liquids_types=list(set(liquids_types)) #уникализировали
        with open("fluid_DB",'r',encoding='utf-8') as json_file:
            fluid_DB=json.load(json_file)
        #мы по имени в FluidModel ищем нужным нам FluidBase
        FluidModel=fluid_DB['FluidModel']
        needed_data=[]
        for el in FluidModel['data']:
            if el[0] in liquids_types:
                needed_data.append(el)
        fluid_section={
            "UOM":FluidModel['UOM'],
            "columnCount":8,
            "columnKeys":FluidModel['columnKeys'],
            "data":needed_data,
            "rowCount":len(needed_data),
            "value":""}
        return fluid_section


if __name__ == "__main__":
    with open(os.getcwd()+'/debug.json', 'w',encoding='utf-8') as json_file:
            data_grp=json.dump(constructor().prop_section("{10a1f3cb-608a-32cd-a805-2f62964e1d9c}",
                                                          "{10a1f3cb-608a-32cd-a805-2f62964e1d9c}"),
                               json_file)
    
    '''with open(os.getcwd()+'/debug.json', 'w',encoding='utf-8') as json_file:
            data_grp=json.dump(,son_file)'''
            
