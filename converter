import json,copy,simplejson
class converter:
    #зачитать файл-проект
    def convert(self,project_path):
        with open(project_path,'r',encoding='utf-8') as prj:
            full_project=json.load(prj)
        #получить нужную вкладку Design
        def design(project):
            designs=[]
            for el in project['Wells'][0]['Designs']:
                if el['name']!="":
                    designs.append(el)
            #убираем Results, Log, RuntimeFlags
            for d in designs:
                d['format']="json"
                d['reason']="solver"
                d['NON_UNIFORM_STRESS']['STRESS_MAX']=""
                d['NON_UNIFORM_STRESS']['STRESS_MIN']=""
                d['NON_UNIFORM_STRESS']['STRESS_MIN_AZIMUTHS']=""
                d['SRV']['NATURAL_FRACTURES']=""
                del d['Results']
                del d['Log']
                del d['RuntimeFlags']
                del d['Stages'][0]['Results']
                del d['Stages'][0]['PRC']
                del d['Stages'][0]['FracturePumpingSchedule']
                d['Stages'][0]['RealData']={}
                d['USE_PROPPANT_FRICTION']=False
            return designs 
        #получить нужную вкладку Drilling
        def drilling(project):
            to_change=project['Wells'][0]
            to_change['Drilling']['Drilling parameters']['data'][len(to_change['Drilling']['Drilling parameters']['data'])-1]=[None]
            Drilling=to_change['Drilling']
            return Drilling
        #получить нужную вкладку LayersParams
        def layers_params(project):
            def void_check(element):
                voids=[]
                for e in range(0,len(element)):
                    if element[e]=="":
                        voids.append(e)
                if len(element)!=len(voids):
                    return True
                else:
                    return False  
            def el_treatment(element):
                out=copy.deepcopy(element)
                for i in range(1,4):
                    if element[i]['value']['2']!=0 and element[i]['value']['10']!=0:
                        out[i]=True
                    else:
                        out[i]=False
                return out
            LayersParams={}
            LayersParams['ProductionTarget']=project['LayersParams']['ProductionTarget']
            LayersParams['UOM']=project['LayersParams']['UOM']
            LayersParams['columnCount']=project['LayersParams']['columnCount']
            LayersParams['columnKeys']=project['LayersParams']['columnKeys']
            LayersParams['data']=[]
            #вроде удаляются те, что имеют "" вo всех элементах
            for el in project['LayersParams']['data']:
                condition=void_check(el)
                if condition==True:
                    LayersParams['data'].append(el_treatment(el))
            LayersParams['rowCount']=len(LayersParams['data'])
            LayersParams['value']=project['LayersParams']['value']
            return LayersParams
        #функция вытаскивает из пустого проекта данные под солвер
        def constructor(project):
            fracture_solver_init={
                "AcidBase":project['AcidBase'],
                "Design":design(project)[0], #тут пока что нулевой элемент
                "Drilling":drilling(project),
                "FluidBase":project['FluidBase'],
                "Inclinometry":project['Wells'][0]['Inclinometry'],
                "Layers":project['Layers'],
                "LayersParams":layers_params(project),
                "Pressure Losses Type":"PressureLossesTypeCustom",
                "ProppantBase":project['ProppantBase'],
                "format":"json"}
            return fracture_solver_init
        #соберем json под запуск
        return constructor(full_project)
    
    #функция подсовывает в пустой проект результаты расчета 
    def proj(self,project_path,result):
        with open(project_path,'r',encoding='utf-8') as prj:
            void_project=json.load(prj)
        full_project=copy.deepcopy(void_project) #скоприровали
        full_project['PEBIRegistry'].clear()
        full_project['PEBIRegistry']={
            "SerializableObject::Children":void_project['PEBIRegistry']['SerializableObject::Children']}
        for el in full_project['Wells'][0]['Designs']:
            el['USE_PROPPANT_FRICTION']=False
            
            if el['name']!="":
                el['name']="Design changed"
                el['RuntimeFlags']=['RuntimeFlagHasResults']
                el['Stages'][0]['Results']['accumulated']['accumulated']={
                    "accumulated data":result['frames'][0]['{00000000-0000-0000-0000-000000000000}']['Ports'][0]['Results']['accumulated data'],
                    "accumulated temperature profile":{}}
                el['Stages'][0]['Ports'][0]['Results']['accumulated']={
                    "accumulated data":result['frames'][0]['{00000000-0000-0000-0000-000000000000}']['Ports'][0]['Results']['accumulated data'],
                    "accumulated temperature profile":{}}
                el['Stages'][0]['Ports'][0]['Results']['accumulated auxiliary']={
                    "auxiliary data":result['frames'][0]['{00000000-0000-0000-0000-000000000000}']['Ports'][0]['Results']['auxiliary data']}
        return full_project
    
    #функция создает пустой файл-проект с новым раписанием
    def new_proj(self,old_project_path,new_sch_path):
        with open(old_project_path,'r',encoding='utf-8') as prj:
            old_project=simplejson.load(prj)
        with open(new_sch_path,'r',encoding='utf-8') as sch:
            new_sch=json.load(sch)
        #получаем нужную секцию design
        def design(project):
            designs=[]
            for el in project['Wells'][0]['Designs']:
                if el['name']=="":
                    designs.append(el)
            designs.append(new_sch['Design'])
            i=0
            for d in designs[1:]:
                del d['SRV']['NATURAL_FRACTURES']
                del d['reason']
                del d['NON_UNIFORM_STRESS']['STRESS_MAX']
                del d['NON_UNIFORM_STRESS']['STRESS_MIN']
                del d['NON_UNIFORM_STRESS']['STRESS_MIN_AZIMUTHS']
                d['Results']=project['Wells'][0]['Designs'][i]['Results']
                d['Log']=project['Wells'][0]['Designs'][i]['Log']
                d['RuntimeFlags']=project['Wells'][0]['Designs'][i]['RuntimeFlags']
                d['Stages'][0]['Results']=project['Wells'][0]['Designs'][i]['Stages'][0]['Results']
                d['Stages'][0]['PRC']=project['Wells'][0]['Designs'][i]['Stages'][0]['PRC']
                d['Stages'][0]['FracturePumpingSchedule']=project['Wells'][0]['Designs'][i]['Stages'][0]['FracturePumpingSchedule']
                del d['Stages'][0]['RealData']
                d['USE_PROPPANT_FRICTION']=True
                i+=1

            return designs
                
            
        #получить нужную секцию drilling
        def drilling(project):
            drilling=new_sch['Drilling']
            return drilling
            
        old_project['Wells'][0]['Designs']=design(old_project)
        #old_project['Wells'][0]['Drilling']=drilling(old_project)
        old_project['ProppantBase']=new_sch['ProppantBase']
        old_project['FluidBase']=new_sch['FluidBase']
        return old_project

if __name__ == "__main__":
    '''path="D:/Daniel/Развитие/hf_sch_generator/materials/пустой.json"
    path_="D:/Daniel/Развитие/hf_sch_generator/materials/result.json"
    with open(path_,'r') as result_file:
        result=json.load(result_file)
    #proj_jsn=converter().proj(path)
    with open("debug.json",'w') as debug_file:
        json.dump(converter().proj(path,result),debug_file)'''
    dir_path="D:\Daniel\Развитие\hf_sch_generator\materials"
    json_path=f"{dir_path}/DEBUG.json"
    with open(f"{dir_path}/new_project.json",'w') as new_project:
                    simplejson.dump(converter().new_proj(json_path, f"{dir_path}/new_f_s_init.json"),new_project,allow_nan=False,ignore_nan=True)
    
